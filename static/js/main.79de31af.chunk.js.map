{"version":3,"sources":["Components/Header/Header.tsx","Components/HomePage/HomePage.tsx","api.jsx","Components/Filtering/Filtering.tsx","Components/TableBody/TableBody.tsx","Components/PeopleTable/PeopleTable.tsx","Components/PeoplaPage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["Header","className","id","to","type","HomePage","getPeople","a","fetch","response","json","Filtering","useState","querySearch","setQuerySearch","history","useNavigate","location","useLocation","searchParams","URLSearchParams","search","onQueryChange","useCallback","debounce","newQuery","set","delete","toString","value","onChange","event","target","TableBody","person","people","slug","name","sex","born","died","motherName","fatherName","findPerson","personName","find","man","style","color","PeopleTable","userSlug","useParams","query","get","sortBy","sortOrder","tableHeadItem","title","sortLink","visiblePeople","lowerQury","toLowerCase","filter","includes","sort","b","localeCompare","reverse","onClick","map","classNames","PeoplePage","setPeople","useEffect","fetchPeople","catch","requestError","Error","App","path","element","index","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79de31af.chunk.js","sourcesContent":["/* eslint-disable react/jsx-filename-extension */\nimport { Link } from 'react-router-dom';\n\nconst Header = () => (\n  <nav className=\"navbar is-primary\">\n    <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n      <div className=\"navbar-start\">\n        <div className=\"navbar-item\">\n          <Link to=\"/home\">\n            <button type=\"button\" className=\"button is-link\">\n              Home\n            </button>\n          </Link>\n        </div>\n\n        <div className=\"navbar-item\">\n          <Link to=\"/people\">\n            <button type=\"button\" className=\"button is-link\">\n              People\n            </button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  </nav>\n);\n\nexport default Header;\n","const HomePage = () => (\n  <h1 className=\"is-size-1 has-text-centered\">Home page</h1>\n);\n\nexport default HomePage;\n","const URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async () => {\n  const response = await fetch(URL);\n\n  return response.json();\n};\n","import React, { useCallback, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst Filtering: React.FC = () => {\n  const [querySearch, setQuerySearch] = useState('');\n\n  const history = useNavigate();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const onQueryChange = useCallback(\n    debounce((newQuery) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history(`?${searchParams.toString()}`);\n    }, 500), [],\n  );\n\n  const handleQueryChange = (value: string) => {\n    setQuerySearch(value);\n    onQueryChange(value);\n  };\n\n  return (\n    <div className=\"filtering\">\n      <input\n        type=\"text\"\n        data-cy=\"filterInput\"\n        value={querySearch}\n        onChange={(event) => handleQueryChange(event.target.value)}\n      />\n    </div>\n  );\n};\n\nexport default Filtering;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../../People';\n\ntype Props = {\n  person: Person,\n  people: Person[],\n};\n\nconst TableBody: React.FC<Props> = ({ person, people }) => {\n  const {\n    slug,\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n  } = person;\n\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  const findPerson = (personName: string) => {\n    if (people.find(man => man.name === personName)) {\n      return (\n        <p className=\"is-clickable\">\n          {personName}\n        </p>\n      );\n    }\n\n    return (\n      <p className=\"has-text-weight-bold has-text-black\">\n        {personName}\n      </p>\n    );\n  };\n\n  return (\n    <>\n      <td>\n        <Link to={`/people/${slug}?${searchParams.toString()}`}>\n          <p\n            className=\"is-clickable\"\n            style={sex === 'm'\n              ? ({ color: 'rgb(0, 71, 171)' })\n              : ({ color: 'rgb(255, 0, 0)' })}\n          >\n            {name}\n          </p>\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td style={{ color: 'rgb(255, 0, 0)' }}>\n        <Link to={`/people/${slug}?${searchParams.toString()}`}>\n          {motherName && findPerson(motherName)}\n        </Link>\n      </td>\n\n      <td style={{ color: 'rgb(0, 71, 171)' }}>\n        <Link to={`/people/${slug}?${searchParams.toString()}`}>\n          {fatherName && findPerson(fatherName)}\n        </Link>\n      </td>\n    </>\n  );\n};\n\nexport default TableBody;\n","import classNames from 'classnames';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Person } from '../../People';\nimport Filtering from '../Filtering/Filtering';\nimport TableBody from '../TableBody/TableBody';\n\ntype Props = {\n  people: Person[],\n};\n\nconst PeopleTable:React.FC<Props> = ({ people }) => {\n  const { userSlug } = useParams();\n\n  const history = useNavigate();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query') || '';\n  const sortBy = searchParams.get('sortBy') || '';\n  const sortOrder = searchParams.get('sortOrder') || '';\n\n  const tableHeadItem = (title: string) => {\n    if (sortBy === title) {\n      if (sortOrder) {\n        return <div className=\"fas fa-caret-square-up\" />;\n      }\n\n      return <div className=\"fas fa-caret-square-down\" />;\n    }\n\n    return <div className=\"far fa-caret-square-down\" />;\n  };\n\n  const sortLink = (title: string) => {\n    if (!sortBy || sortBy !== title) {\n      searchParams.set('sortBy', title);\n      searchParams.delete('sortOrder');\n    } else if (!sortOrder) {\n      searchParams.set('sortOrder', 'desk');\n    } else {\n      searchParams.delete('sortBy');\n      searchParams.delete('sortOrder');\n    }\n\n    history(`?${searchParams.toString()}`);\n  };\n\n  let visiblePeople = [...people];\n\n  if (query) {\n    const lowerQury = query.toLowerCase();\n\n    visiblePeople = visiblePeople.filter(\n      person => person.name.toLowerCase().includes(lowerQury)\n      || person.motherName?.toLowerCase().includes(lowerQury)\n      || person.fatherName?.toLowerCase().includes(lowerQury),\n    );\n  }\n\n  if (sortBy) {\n    visiblePeople.sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n        case 'sex':\n          return a[sortBy].localeCompare(b[sortBy]);\n\n        case 'born':\n        case 'died':\n          return a[sortBy] - b[sortBy];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (sortOrder) {\n    visiblePeople.reverse();\n  }\n\n  return (\n    <div className=\"is-flex is-justify-content-center\">\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th onClick={() => sortLink('name')}>\n              {'Name '}\n              {tableHeadItem('name')}\n            </th>\n\n            <th onClick={() => sortLink('sex')}>\n              {'Sex '}\n              {tableHeadItem('sex')}\n            </th>\n\n            <th onClick={() => sortLink('born')}>\n              {'Born '}\n              {tableHeadItem('born')}\n            </th>\n\n            <th onClick={() => sortLink('died')}>\n              {'Died '}\n              {tableHeadItem('died')}\n            </th>\n\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n        <tbody>\n          {visiblePeople.map(person => (\n            <tr\n              key={person.slug}\n              className={classNames('on-hover',\n                {\n                  'has-background-primary-light': userSlug === person.slug,\n                })}\n            >\n              <TableBody person={person} people={visiblePeople} />\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <Filtering />\n    </div>\n  );\n};\n\nexport default PeopleTable;\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../../api';\nimport { Person } from '../../People';\nimport PeopleTable from '../PeopleTable/PeopleTable';\n\nconst PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    const fetchPeople = async () => {\n      const response = await getPeople();\n\n      setPeople(response);\n    };\n\n    fetchPeople().catch((requestError) => {\n      throw new Error(requestError);\n    });\n  }, []);\n\n  return (\n    <div className=\"people\">\n      <h1 className=\"is-size-1 has-text-centered\">People table</h1>\n      <PeopleTable people={people} />\n    </div>\n  );\n};\n\nexport default PeoplePage;\n","import './App.scss';\nimport {\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport Header from './Components/Header/Header';\nimport HomePage from './Components/HomePage/HomePage';\nimport PeoplePage from './Components/PeoplaPage/PeoplePage';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n\n      <Route path=\"people\">\n        <Route index element={<PeoplePage />} />\n\n        <Route path=\":userSlug\" element={<PeoplePage />} />\n      </Route>\n\n      <Route\n        path=\"/home\"\n        element={\n          <Navigate to=\"/\" replace />\n        }\n      />\n\n      <Route\n        path=\"*\"\n        element={\n          <h1>Page not found</h1>\n        }\n      />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}